rm(list=ls())
library(sf)
library(dplyr)
library(RPostgres)
#update path for different machines
gitpath <- "D:/Documents/GitHub/BNG/"
datapath <- "D:/Documents/Data/BNG/"
setwd(paste0(datapath, "Data/SEER_GRID/"))
seer_2km <- st_read('./SEER_net2km.shp')
seer_2km <- seer_2km[, "new2kid"]
# filter to England
conn <- dbConnect(Postgres(),
dbname = "nev",
host = "localhost",
port = 5432,
user="postgres",
password="postgres")
df <- dbGetQuery(conn, "SELECT * FROM regions_keys.key_grid_countries_england")
cell_id <- df$new2kid
seer_2km <- seer_2km[seer_2km$new2kid %in% cell_id, 'new2kid']
## 1.2. New housing locations
## --------------------------
setwd(paste0(datapath, "Data/Urban Sprawl - F.Eigenbrod/"))
setwd(paste0(datapath, '/Data/Urban Sprawl - F.Eigenbrod/'))
city_base <- read.csv(paste0(datapath, "Data/LCM/LCM_2km/lcm_aggr_2000.csv")) %>%
dplyr::rename(farm_ha_base = farm_ha,
wood_ha_base = wood_ha,
sng_ha_base = sng_ha,
urban_ha_base = urban_ha,
water_ha_base = water_ha)
city_scenario <- read.csv('./urban_sprawl_2031_sprawl.csv')%>%
dplyr::rename(farm_ha_scenario = farm_ha,
wood_ha_scenario = wood_ha,
sng_ha_scenario = sng_ha,
urban_ha_scenario = urban_ha,
water_ha_scenario = water_ha)
max_es_offset <- dplyr::full_join(city_base, city_scenario, by = "new2kid") %>%
mutate_if(is.numeric, round, digits=4) %>% # round to 4 as base cover is 4 dp
dplyr::mutate(area_new_builds = ifelse(urban_ha_scenario-urban_ha_base <= 0, 0, urban_ha_scenario-urban_ha_base),
farmland_area = farm_ha_scenario,
percent_frm = farm_ha_scenario / 400,
percent_grs = sng_ha_scenario / 400,
percent_wod = wood_ha_scenario / 400)
max_es_offset <- merge(seer_2km, max_es_offset, by = 'new2kid')
max_es_offset$max_es_offset <- 0
# Load ecosystem service data
setwd(paste0(gitpath,'Output/'))
max_es <- read.csv('all_farm2mixed_tot_es_sprawl_2031_scc.csv')[, c('new2kid',
'tot_es_ha')]
max_es$tot_es_ha[is.na(max_es$tot_es_ha)] <- 0
max_es <- merge(seer_2km, max_es, by = 'new2kid')
# reorder the cells from the highest species richness increases to the lowest
sort_idx <- sort(max_es$tot_es_ha, decreasing = TRUE, index.return = TRUE)[[2]]
max_es <- max_es[sort_idx, ]
idx_positive_es <- sum(max_es$tot_es_ha > 0)
reshuffle_vector <- c(idx_positive_es:nrow(max_es))
resampled_vector <- sample(reshuffle_vector)
max_es[reshuffle_vector, ] <- max_es[resampled_vector,]
# Tot offset area = tot area of new buildings
tot_offset <- sum(max_es_offset$area_new_builds)
offset_proj <- max_es_offset$area_new_builds[max_es_offset$area_new_builds > 0]
sort_idx <- sort(offset_proj, decreasing = TRUE, index.return = TRUE)[[2]]
offset_proj <- offset_proj[sort_idx]
allocated_land <- 0
i <- 1
j <- 1
while(round(allocated_land, 5) < round(tot_offset, 5)){
offset_cell <- max_es$new2kid[i]
offset_land <- offset_proj[j]
idx <- which(max_es_offset$new2kid == offset_cell)
avail_land <- max_es_offset$farmland_area[idx]
if(avail_land > offset_land){
max_es_offset$max_es_offset[idx] <- offset_land
max_es_offset$farmland_area[idx] <- max_es_offset$farmland_area[idx] - offset_land
offset_area_perc <- offset_land / 400 # CORRECT TO /400 TO CORRECT THE % ?
max_es_offset$percent_frm[idx] <- max_es_offset$percent_frm[idx] - offset_area_perc
max_es_offset$percent_grs[idx] <- max_es_offset$percent_grs[idx] + 0.5 * offset_area_perc
max_es_offset$percent_wod[idx] <- max_es_offset$percent_wod[idx] + 0.5 * offset_area_perc
allocated_land <- allocated_land + offset_land
i <- i + 1
j <- j + 1
} else {
i <- i + 1
}
}
max_es_offset_ha <- max_es_offset %>%
dplyr::mutate(
wood_ha = wood_ha_scenario + (max_es_offset/2),
sng_ha = sng_ha_scenario + (max_es_offset/2)) %>%
rename(
farm_ha = farmland_area,
urban_ha = urban_ha_scenario,
water_ha = water_ha_scenario) %>%
dplyr::select(
new2kid,
farm_ha,
wood_ha,
sng_ha,
urban_ha,
water_ha,
max_es_offset) %>%
dplyr::rename(offset_area_ha = max_es_offset)
# check cell areas
max_es_offset_ha %>%
group_by(new2kid) %>%
mutate(sum = farm_ha + wood_ha + sng_ha + urban_ha +water_ha) %>%
filter(sum != 400) # some small rounding errors
# check all offset is allocated
(c(sum(max_es_offset$max_es_offset), sum(max_es_offset$area_new_builds)))
#save
setwd(paste0(gitpath,"Output/"))
st_write(max_es_offset_ha, 'max_es_offset_urban_sprawl_scc.csv')
